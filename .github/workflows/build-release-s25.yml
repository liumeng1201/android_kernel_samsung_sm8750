# GitHub Actions Workflow 的名称
name: Build Kernel & Release (S25)

# 工作流的触发条件
on:
  # 允许你手动在 Actions 页面点击 "Run workflow" 来触发
  workflow_dispatch:
    # 添加输入字段
    inputs:
      branch:
        description: '选择要编译的分支'
        required: true
        # !! 关键改动：将输入框改为下拉选择框 !!
        type: choice
        options:
          - main
          - sukisuultra
          - mksu
          - ksu
        default: 'main'
      is_prerelease:
        description: '是否标记为预发布 (Pre-release)?'
        required: true
        type: boolean
        default: true

jobs:
  build:
    # 指定运行环境为最新的 Ubuntu 系统
    runs-on: ubuntu-latest

    steps:
      # 第一步：检出你的仓库代码
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # 使用你手动输入的分支
          ref: ${{ github.event.inputs.branch }}
          submodules: 'recursive'

      # 第二步：安装所有编译所需的依赖包
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git libncurses5-dev bc bison flex libssl-dev \
            p7zip-full lz4 cpio curl libelf-dev dwarves ccache
      # 第三步：缓存工具链
      - name: Cache Toolchain
        id: toolchain-cache
        uses: actions/cache@v4
        with:
          # 缓存 ./toolchain 目录
          path: ./toolchain
          # 缓存的唯一标识符。如果工具链的下载链接变了，就会创建一个新的缓存
          key: ${{ runner.os }}-toolchain-s25-${{ hashFiles('**/build-release.yml') }}

      # 第四步：下载、合并并解压 S25 工具链
      - name: Download and Extract Toolchain (S25)
        run: |
          echo "开始从 GitHub Releases 下载 S25 工具链分卷..."
          # 下载 S25 的分卷
          wget -O toolchain.part00 "https://github.com/YuzakiKokuban/android_kernel_samsung_sm8750/releases/download/toolchain/toolchainS25.tar.gz.00"
          wget -O toolchain.part01 "https://github.com/YuzakiKokuban/android_kernel_samsung_sm8750/releases/download/toolchain/toolchainS25.tar.gz.01"
          
          echo "合并所有分卷..."
          cat toolchain.part* > toolchain.tar.gz

          echo "创建临时解压目录并开始解压..."
          mkdir -p ./toolchain_temp
          tar -xzvf toolchain.tar.gz -C ./toolchain_temp/
          
          echo "移动文件到正确的工具链目录..."
          mkdir -p ./toolchain
          # !! 关键：根据 S25 的目录结构，移动 kernel_platform 文件夹 !!
          mv ./toolchain_temp/kernel_platform ./toolchain/
          
          echo "清理下载和临时文件..."
          rm toolchain.part* toolchain.tar.gz
          rm -rf ./toolchain_temp
          
          echo "工具链准备完毕。"
          
      # 第五步：缓存 ccache 编译结果
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          # 缓存 ccache 的默认目录
          path: ~/.ccache
          # 缓存的标识符，与分支名关联
          key: ${{ runner.os }}-ccache-${{ github.event.inputs.branch }}
          # 如果 key 完全匹配不上，可以尝试恢复最接近的缓存
          restore-keys: |
            ${{ runner.os }}-ccache-

      # 第五步：根据分支设置 KernelSU
      - name: Setup KernelSU based on branch
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch }}"
          echo "当前分支是: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == "sukisuultra" ]]; then
            echo "正在为 sukisuultra 分支设置 KernelSU..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          elif [[ "$BRANCH_NAME" == "mksu" ]]; then
            echo "正在为 mksu 分支设置 KernelSU..."
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash -s main
          elif [[ "$BRANCH_NAME" == "ksu" ]]; then
            echo "正在为 ksu 分支设置 KernelSU..."
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          else
            echo "当前分支 ($BRANCH_NAME) 不需要设置 KernelSU，跳过此步骤。"
          fi
          
          echo "KernelSU 设置步骤完成。"

      # 最后一步：运行构建和发布脚本
      - name: Run Build and Release Script
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          IS_PRERELEASE: ${{ github.event.inputs.is_prerelease }}
          TARGET_BRANCH: ${{ github.event.inputs.branch }}
        run: |
          echo "赋予构建脚本执行权限..."
          chmod +x ./build.sh
          
          echo "开始执行构建和发布脚本..."
          ./build.sh

